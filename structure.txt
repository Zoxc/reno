Node
- a node in the graph of data-types
-

IComponent
- use_component(settings): Called when it's included in a package

Data < IComponent, Stackable
- state: Package::State, the state attached to this mode
- a piece of data, most likely a file

Module Mergable
- use_component(settings): Called when it's included in a package
- abstract: merge(other): Called when it's merged with another component

Processor < IComponent

File < Data
- Extension < IComponent: maps a file extension to a Data type

Language < IComponent
- use_component: adds the following things the Package
       - File::Extension < Mergable: c => Language::C for example
       - Interface
			- should link to Package::Interface and not any state
			- define(name, value = null): Defines a C preprocessor define which is defined on the processsed files

NameSpace < IComponent
- This represents the namespace for the package. Used by tasks, options, parameters and sub-packages.			

Components
- private data
- public data
- use: Uses a component by calling use_component on it

Package < IComponent, Stackable
- State: The settings for the package
	- Components private
	- Components public
	- Interface:
		- task(name = nil): defines a task, no name means it's the default one
		- pack(*patterns): some files to be included in this package
		- package(name = nil): defines a sub-package
		- export(*args): publish components in args
		- use(*args): add a private component
		- merge(nodes, using, to = nil): merge some components into 'to', or the default output of 'using'
		- convert(from, to): converts the nodes 'from' into type 'to'
		- nodes(type = nil): returns the current attached nodes, optionally of type 'type'
		- name: sets the name for the package
		- version: sets the version for the package
		- o(name, &block): defines a boolean option

?
- Processor
- Sub-Packages
- Merging
- Able to generate dependencies for all files without executing actions
- store cached files with a hash tree
- processors select which configuration options to hash, combine it with the input file
- configuration options should have a standard interface ("Option" class?), then configurations are a hash of "Option"s and value
- merge State and Components and handle public things differently?
- add an Collection class for nodes and remove nodes from State/Components